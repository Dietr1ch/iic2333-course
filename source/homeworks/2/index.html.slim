---
title: Tarea 2 (25/4 12:00)
layout: activity
---

article
	section.top
		p En esta tarea van a implementar un <em>Scheduler</em> para pintos.
		p Además de elegir procesos a ejecutar, deberán solucionar algunos problemas relacionados.
		ul
			li Un <em>Scheduler</em> de prioridades tiene algunos detalles,
			ul
				li Hay que tener una prioridad para cada proceso.
				li Hay que tener cuidado con la <em>Inanición</em>, especialmente al considerar esperas.

			li Los procesos necesitan reportar su estado de termino y estadísticas de ejecución.
			ul
				li Los procesos padres deberían saber en qué estado terminaron sus hijos para decidir qué hacer.
				li Es mediante las estadísticas que se puede evaluar el <em>Scheduler</em>



	section#todo

		h3 <em>Scheduling</em>
		/  ===================
		p El <em>Scheduling</em> es el arte de escoger un orden adecuado de tareas (paralelas o no) de manera de aprovechar de mejor manera los recursos disponibles.

		p Una de las ocurrencias del problema en un SO es al escoger un orden para ejecutar procesos.
		p Esta no es la situación ideal, ya que no sabemos mucho de los requisitos de cada tarea (ni tiempo, ni memoria a usar). Justamente por esto es que se necesitan criterios fáciles de calcular (decidibles) y a la vez informativos para lograr escoger algún orden bueno.

		p Uno de los conceptos esenciales en el <em>Scheduling</em> de CPU es el de buscar un orden equitativo al distribuir recursos entre todos los que los necesitan.
		p Para lograr una "buena" distribución se opta por ejecutar los programas activos de forma alternada intervalos de al menos 1 <em>Quantum</em>, una fracción ínfima de tiempo. Ese ínfimo se escoge de manera que los procesos alcancen a avanzar en su ejecución, pero evitando usar demasiado tiempo, ya que se dejaría al resto sin avanzar.
		p En sistemas interactivos se suele escoger también una cota superior para las ejecuciones, usualmente evitando ejecutar más de \(K\) quantums consecutivos el mismo proceso. En estos sistemas se suele premiar el devolver cooperativamente el control.


		h4 <em>Scheduling</em> de prioridades
		/  ----------------------------------
		p Un sistema de <em>Scheduling</em> común de ganar información para decidir el orden es usando prioridades definidas por el usuario.
		p El uso más simple de esa información es mediante un <em>Scheduling</em> de prioridades.

		p En este sistema, existe una función \(priority :: Process \rightarrow \mathbb{N}\) que para cada proceso retorna una prioridad en \([pri_{min}, pri_{max}]\). Esta función tendrá por defecto el valor \(pri_{default}\)
		p Al escoger un proceso de la lista \(ready\), se deberá escoger alguno de los de mayor prioridad, idealmente el con menor tiempo de ejecución en caso de empates.

		h5 Casos especiales
		/  ----------------
		p El <em>Scheduling</em> sería bastante simple si es que los procesos estuviesen siempre en estado \(running\) con una prioridad fija, pero esto no es así.

		ul
			li Un proceso aumenta de prioridad sobrepasando la del proceso que ejecuta
			li El proceso que ejecuta disminuye de prioridad dejando de ser uno de los con mayor prioridad.
			li Aparece un proceso con mayor prioridad en la lista \(ready\)
			ul
				li Proceso nuevo
				li Proceso que estaba en estado \(waiting\)
			li Un proceso \(A\) espera a uno de menor prioridad \(C\).
			ul
				li Puede haber un proceso \(B\) de prioridad intermedia que evita que \(C\) ejecute, logrando tener importancia aparente mayor que la de \(A\), ya que a través de la espera evita que \(A\) ejecute.

		h5 Tests
		/  -----
		p En <code>src/tests/threads/</code> pueden encontrar algunos tests para revisar esta tarea. (No dice que todos lo hacen..)
		ul
			li priority-change
			li priority-preempt
			li priority-fifo
			li priority-donate-.*
			ul
				li Sólo para <em>locks</em>

		p Ejecución de tests,
		pre
			code.hljs.bash
				| cd /path/to/pintos/
				 
				  cd src/threads/
				  make  # Root's make still works, but it does more work.
				 
				  ../utils/pintos -- run TestName  # where TestName is the basename of a test (priority-change.c => priority-change)



		h5 Estadísticas
		/  ------------

		p Es necesario obtener las siguientes medidas,
		ul
			li Por Proceso
			ul
				li Tiempo (o Quantums) y Veces que cada proceso está
				ul
					li bloqueado
					li ejecutando
				li Tiempo (o Quantums) en ready (pero no ejecutando)
				li Veces que
				ul
					li Agotó su Quantum
					li Fué expropiado
			li Globales
			ul
				li Cambios de contexto
				li Procesos que ejecutaron
				li Espera promedio en ready

		p El cálculo de estas debería ser lo más barato posible. Es posible medir diferencias con contadores globales para calcular rangos de tiempo y ocurrencias.
