---
title: Administración de Memoria
layout: slide
---


section
  h2 Direccionamiento de Memoria

section
  h2 Direccionamiento de Memoria

  section#memory0
    div <b>MEMORIA</b> 
    ul
      li Un gran arreglo de <i>bytes</i>
      li Cada uno con su propia <b>dirección</b>

    div == image_tag '/images/figures/04-memory1.png', :width=>"50%"

    ul.fragment
      li  PC lee instrucciones desde una dirección de memoria
      li  Instrucciones pueden requerir leer operandos desde otra dirección de memoria
      li  Resultados suelen ser almacenados en alguna dirección de memoria

  section#memory1
    div <b>Velocidad</b>
    ul.fragment
      li Registro: acceso en un ciclo de CPU
      li Memoria: requiere acceso al <i>bus de memoria</i>
      li ¿Solución? <span class="fragment">caché</span>

  section#memory2
    div.fragment <b>Protección</b>
    ul.fragment
      li Multiprogramación. Procesos no deben acceder a memoria de otro procesos
      li ¿Si hay dos procesos que hagan referencia a la misma dirección?

    div == image_tag '/images/figures/04-spaces.png', :width=>"35%"
    div.fragment Referencias absolutas

  section#memory3
    div Procesos poseen registros <i>base</i> y <i>limit</i>

    div == image_tag '/images/figures/02-8_01.pdf.png', :width=>"30%"

    ul.fragment
      li ¿S.O. verifica cada acceso? <span class="fragment">leeeento</span>
      li.fragment ¿Solución? <span class="fragment">Verificación por <i>hardware</i></span>

  section#memory4
    div Registros <i>base</i> y <i>limit</i> se cargan, y son verificados por <i>hardware</i>.

    div == image_tag '/images/figures/02-8_02.pdf.png', :width=>"70%"

    div ¿Quién hace esto? <span class="fragment">MMU: <i>Memory Manager Unit</i></span>
    div.fragment Referencias relativas:  <b>JMP 28 + base</b>, en lugar de <b>JMP 28</b>

  section#memory5
    div Procesos piden una dirección de memoria ... <span class="fragment"> pero MMU les entrega otra</span>
    ul.fragment
      li <b>Dirección lógica o virtual</b>: solicitado por el proceso (JMP 28)
      li <b>Dirección física</b>: accedida en la memoría física (JMP 16384+28)

    div == image_tag '/images/figures/04-twoprocs.png', :width=>"25%"

    div.fragment ¿Cuándo se determina la dirección física? (1) Compilación (2) Ejecución (3) Carga

section#spaces0
  h2 Cargando procesos

  section#spaces1
    div Procesos pueden ser cargados y descargados de la memoria

    div == image_tag '/images/figures/02-8_05.pdf.png', :width=>"50%"

  section#spaces2
    div Espacio libre se modifica en cada carga/<i>swap-in</i> o descarga/<i>swap-out</i>

    div == image_tag '/images/figures/04-loadprocs.png', :width=>"70%"

  section#spaces3
    div Direcciones deben ajustarse ante cada carga

    div == image_tag '/images/figures/02-8_06.pdf.png', :width=>"70%"

  section#spaces4
    div <b>¿Dónde ubicar un proceso nuevo?</b>

    div Estrategias
    ul
      li.fragment <strong>First-fit</strong>. En el primer lugar disponible.
      li.fragment <strong>Best-fit</strong>. En el que deja menos espacio libre (el más pequeño posible).
      li.fragment <strong>Worst-fit</strong>. En el que deja más (el más grande).

    div.framgent ¿Cuál es mejor?

  section#spaces5
    div <b>Problema: FRAGMENTACION</b>

    div En dos variedades

    ul
      li.fragment <b>Fragmentación Externa</b>: Hay espacio para otro proceso, pero no contiguo.
      li.fragment <b>Fragmentación Interna</b>: Espacio sobre-asignado a un proceso.

  section#spaces6
    div <b>¿Cómo evitar la fragmentación externa?</b>

    div.fragment <b>Compactación</b>: fusionar huecos
    div.fragment == image_tag '/images/figures/02-fusion.png', :width=>"20%"

    div.framgment ¿Pero?
    ul
      li.fragment Es <b>costoso</b>. No voy esperar que mis 16GB se reacomoden.
      li.fragment ¿Otras soluciones? <span class="fragment">Técnicas de <i>memoria virtuual</i>: <span class="fragment"><b>segmentación</b>, </span><span class="fragment"><b>paginación</b>

section#seg
  h2 Segmentación

  section#seg1
    div Espacio de direcciones se divide en segmentos lógicos
    ul
      li.fragment  Código
      li.fragment  Variables globales
      li.fragment  <em>Heap</em> (para asignación dinámica de memoria)
      li.fragment  <em>Stacks</em> para cada <em>thread</em>
      li.fragment  Código de la librería estándar de C

    div == image_tag '/images/figures/02-8_07.pdf.png', :width=>"20%"


  section#seg2

    div Cada <b>segmento</b> se puede cargar en regiones distintas de memoria.

    div Segmentos poseen: identificador y longitud

    div == image_tag '/images/figures/02-8_07.pdf.png', :width=>"20%"

    div Una dirección de memoria específica en memoria segmentada está formada por una tupla con dos datos (un par):
      $\langle$ <code>numeroDeSegmento</code>, <code>offset</code> $\rangle$

  section#seg3

    div Una dirección lógica es: $\langle$ <code>segmento</code>, <code>offset</code> $\rangle$

    div Información de segmentos cargados se almacena en: <b>Tabla de segmentos</b>

    div == image_tag '/images/figures/02-8_09.pdf.png', :width=>"40%"

  section#seg4

    div Una dirección lógica es: $\langle$ <code>segmento</code>, <code>offset</code> $\rangle$

    div MMU usa la <b>Tabla de segmentos</b> para obtener la <b>dirección física</b>

    div == image_tag '/images/figures/02-8_08.pdf.png', :width=>"50%"

section#pag
  h2 Paginación

  section#pag1
    div style="text-align:left;" Segmentación reduce el problema de la fragmentación externa <span class="fragment"> ... pero no lo soluciona</span>

    div.fragment style="text-align:left;" <b>Paginación</b> divide el espacio virtual de direcciones en regiones de igual tamaño
    ul
      li.fragment Espacio virtual (lógico) de direcciones se divide en <b>páginas</b>
      li.fragment Espacio físico de direcciones se divide en <b>frames</b> (marcos)
      li.fragment Páginas y <i>frames</i> son del mismo tamaño


    div.fragment ¿De qué tamaño son las páginas de su sistema?

  section#pag2
    div Dirección de memoria paginada está compuesta de<br/>
        $\langle$ <code>numeroDePagina</code>, <code>offset</code> $\rangle$

    div ==image_tag '/images/figures/02-8_10.pdf.png', :width=>"60%"

  section#pag3

    div ==image_tag '/images/figures/02-8_11.pdf.png', :width=>"45%"


  section#pag4
    div style="text-align:left;" Tamaños posibles de páginas y frames son determinados por <i>hardware</i>

    div style="text-align:left;" Al ser potencias de 2, se evitan sumas.

    ul
      li.fragment Direcciones lógicas de $m$-bit
      li.fragment Tamaño de página de $2^n$ bytes

    div 
      img src='/images/figures/02-in-8_1.pdf.png' style="background:none; border:none; box-shadow:none;" width="50%"

    div.fragment Cantidad de páginas posibles: $2^{m-n}$

  section#pag5
    div style="text-align:left;" Dirección virtual: $m=4$ bit, $n=2$
    ul 
      li.fragment $2$-bit: número de página... $2^{m-n} = 4$ páginas
      li.fragment $2$-bit: <i>offset</i>... Páginas de tamaño $2^{n}=4$ byte.
      li.fragment Memoria física: 32 byte... $8$ <i>frames</i> de memoria.

    div 
      img src='/images/figures/02-8_12.pdf.png' style="background:none; border:none; box-shadow:none;" width="25%"

    div.fragment Dirección lógica: 1001 <span class="fragment">, ... dirección física: 0101</span>

  section#pag6
    div style="text-align:left;" Paginación elimina <b>fragmentación externa</b>...<span class="fragment">pero tenemos <b>fragmentación interna</b></span>

    div style="text-align:left;" Ejemplo: Páginas de $4$KB, y un proceso solicita $8$KB.
    ul
      li.fragment Se asignan 21 páginas de $4$KB... <span class="fragment">$3$KB desperdiciados.</span>

  section#pag7
    div style="text-align:left;" Ejemplo: Páginas de $8$KB. Direcciones virtuales de $16$-bit.

    ul
      li.fragment ¿Cuántas páginas?
      li.fragment ¿Tamaño de la tabla de páginas?

  section#pag8
    div style="text-align:left;" Ejemplo: Páginas de $4$KB. Direcciones virtuales de $32$-bit.

    ul
      li.fragment ¿Cuántas páginas? <span class="fragment">$2^{20}$</span>
      li.fragment ¿Tamaño de la tabla de páginas? <span class="fragment">$\geq 1$MB</span>

    div.fragment Accesos pueden hacerse lentos. ¿Por qué?

  section#pag9
    div <b>Translation Look-aside Buffer (TLB)</b>

    div style="text-align:left;" Caché en <i>hardware</i> para las entradas de la tabla de páginas (32 a 1024 entradas).

    div.fragment
      img src='/images/figures/02-8_14.pdf.png' style="background:none; border:none; box-shadow:none;" width="50%"

  section#pag10
    div
      img src='/images/figures/02-8_14.pdf.png' style="background:none; border:none; box-shadow:none;" width="50%"

    ul
      li.fragment Tiempo de acceso a TLB: $100$ns
      li.fragment Tiempo de acceso a memoria: $500$ns
      li.fragment ¿Tiempo promedio de acceso con $80\%$ hit-rate?

  section#pag11
    div <b>Tablas de páginas jerárquicas</b>

    div
      img src='/images/figures/02-8_17.pdf.png' style="background:none; border:none; box-shadow:none;" width="35%"

  section#pag12
    div <b>Tablas de páginas jerárquicas</b>
    div Direccionamiento de dos niveles

    div
      img src='/images/figures/02-8_18.pdf.png' style="background:none; border:none; box-shadow:none;" width="60%"

    div
      img src='/images/figures/02-in-8_2.pdf.png' style="background:none; border:none; box-shadow:none;" width="35%"


  section#pag13
    div <b>Tablas de páginas jerárquicas</b>
    div Direcciones de 64-bit

    div
      img src='/images/figures/02-in-8_4.pdf.png' style="background:none; border:none; box-shadow:none;" width="50%"

    div Con otro nivel de paginación

    div
      img src='/images/figures/02-in-8_5.pdf.png' style="background:none; border:none; box-shadow:none;" width="50%"


  section#pag14
    div <b>Tablas de páginas con <i>hash</i></b>

    div
      img src='/images/figures/02-8_19.pdf.png' style="background:none; border:none; box-shadow:none;" width="50%"

    div Apropiadas para espacios de direcciones <em>sparse</em> (ralos)

  section#pag15
    div <b>Tablas de páginas invertida</b>

    ul
      li.fragment  Una entrada por frame (en lugar de página)
      li.fragment  Sólo una tabla en el sistema (no por proceso)
  
    div
      img src='/images/figures/02-8_20.pdf.png' style="background:none; border:none; box-shadow:none;" width="45%"

    div Usada en 64-bit UltraSPARC, y PowerPC


/---------------------------------------------------------------------
/ Frame
  \frametitle{Direccionamiento}
  \framesubtitle{Otros conceptos comunes}
/
  \begin{description}
 //   li.fragment [<strong>Carga dinámica</strong>] Cargar sólo parte del proceso. Cuando una rutina se necesita,
                                se carga la sección necesaria de código.
 //   li.fragment [<strong>Bibliotecas</strong>] Conjunto de rutinas de uso común que se <em>agregan</em> al programa
      ul
        li.fragment  <strong>Enlace Estático</strong> (<code>.lib</code>, <code>.a</code>). Rutinas se enlazan dentro del binario final.
            ul
              li.fragment  +Rápido
              li.fragment  -Binario de mayor tamaño
              li.fragment  Modificación requiere re-compilación
            
        li.fragment  <strong>Enlace Dinámico</strong> (<code>.dll</code>, <code>.so</code>). Rutinas se enlazan con un <em>stub</em>: 
                              código representante de la rutina. Rutina se carga al llamarla.
            ul
              li.fragment  -Lento, pero sólo al primer acceso
              li.fragment  +Binario más pequeño
              li.fragment  Pueden reemplazarse <em>en caliente</em> (con un esquema de versiones)


section#virmem
  h2 Memoria Virtual

  section#virmem1

    div style="text-align:left;" Segmentación y paginación intentan dar la ilusión que toda la memoria es contínua.

    div.fragment style="text-align:left;" ... pero el programa aún debe estar completamente en memoria

    div.fragment style="text-align:left;" Pero no es siempre necesario.

    div.fragment style="text-align:left;" &nbsp<br/>&nbsp;<br/>

    ul
      li.fragment Carga dinámica
      li.fragment ¿Se requiere todo el código en memoria? ¿Librerías (estáticas y dinámicas)?
      li.fragment ¿Y si un proceso solicita más memoria que la memoria física del sistema?

  section#virmem2

    div <i>Frames</i> se cargan de disco a medida que se necesitan.

    div
      img src='/images/figures/02-9_01.pdf.png' style="background:none; border:none; box-shadow:none;" width="45%"

  section#virmem3
    div Bibliotecas compartidas se asigna a <em>frames</em> ya cargados

    div
      img src='/images/figures/02-9_03.pdf.png' style="background:none; border:none; box-shadow:none;" width="45%"

  section#virmem4
    div style="text-align:left;" <b>Paginación por demanda</b> <span class="fragment">Primera etapa: mantener registro de páginas cargadas</span>
    
    ul.fragment
      li Bit adicional en tabla de páginas
      ul
        li <em>Valid</em>: Página en memoria
        li <em>Invalid</em>: Página almacenada en disco, pero no en memoria
      
      li.fragment  Al detectar un acceso a una página <em>invalid</em>, ésta se carga dinámicamente y marca el bit a <em>valid</em>
  
    div
      img src='/images/figures/02-9_05.pdf.png' style="background:none; border:none; box-shadow:none;" width="30%"
  
  section#virmem5
    div style="text-align:left;" Segunda etapa: cargar páginas que se necesiten
  
    div style="text-align:left;" Proceso de carga se activa ante un <strong><i>page-fault</i></strong>
  
    div
      img src='/images/figures/02-9_06.pdf.png' style="background:none; border:none; box-shadow:none;" width="40%"

    ul
      li.fragment  Proceso podría empezar con una única página en memoria: <strong>paginación por demanda pura</strong>
  
  section#virmem6
    div style="text-align:left;" Rendimiento de la paginación por demanda
    ul
      li.fragment  $p$, probabilidad de <em>page fault</em>
      li.fragment  $t_{ma}$, tiempo de acceso a memoria, $\sim 200 \times 10^{-9}s$
      li.fragment  $t_{pf}$, tiempo generado por <em>page fault</em>
  
    div.fragment style="text-align:left;" Tiempo efectivo de acceso a memoria, $t_e$: 
    div.fragment &nbsp; $t_e = (1-p) \times t_{ma} + p \times t_{pf}$
  
    div.fragment style="text-align:left;" Con $t_{pf} = 8 \text{ms}$:
    div.fragment &nbsp; $t_{e} = 200 + 7999800 p$

    div.fragment style="text-align:left;" Si queremos que la degradación no sea mayor a $10\%$: 
    div.fragment &nbsp; $220 > 200 + 7999800p \Rightarrow p < 0.0000025$

  section#virmem7
    div style="text-align:left;" Al hacer un <code>fork()</code> se <em>copia</em> la memoria del padre al hijo.
  
    ul
      li.fragment  ¿Y si el hijo no escribe en su memoria o hace inmediatamente <code>exec()</code>?
  
    div.fragment Estrategia <strong>copy-on-write</strong> mantiene las páginas del padre como <em>región compartida para el hijo</em>
  
    div
      img src='/images/figures/02-9_07.pdf.png' style="background:none; border:none; box-shadow:none;" width="40%"

    div
      img src='/images/figures/02-9_08.pdf.png' style="background:none; border:none; box-shadow:none;" width="40%"

    /  Instrucción <code>vfork()</code> implementa <code>fork</code> sin copia de páginas (ni con <em>copy-on-write</em>)
  
  section#virmem8

    div Reemplazo de páginas
/---------------------------------------------------------------------
/\subsection{Reemplazo de páginas}

/ Frame
  \frametitle{Reemplazo de páginas}

/  Si sólo se carga la mitad de la memoria de un proceso, podemos cargar
  más en memoria $\to$ más multiprogramación

/  Si no hay más espacio en memoria, se debe pasar a <em>swap</em> una de las páginas
  actualmente asignadas.

/  \begin{center}
    \includegraphics[width=7cm]{figs/02-9_09.pdf}
  \end{center}
  
  



/---------------------------------------------------------------------
/ Frame
  \frametitle{Reemplazo de páginas}

/  Sistema Operativo necesita <strong>reemplazar</strong> una página existente,
  hacer <em>swap</em> y cargar otra

/  \begin{center}
    \includegraphics[width=7cm]{figs/02-9_10.pdf}
  \end{center}

/  Algoritmos para elegir una página <em>víctima</em>  
  


/---------------------------------------------------------------------
/ Frame
  \frametitle{Reemplazo de páginas}

/  \begin{center}
    \includegraphics[width=6cm]{figs/02-9_10.pdf}
  \end{center}

/  Dos transferencias de páginas (pasos 1 y 3)
  ul
    li.fragment  Páginas que no han sido modificadas no necesitan escribirse
          a disco
    li.fragment  <strong>Modify bit</strong> o <strong>Dirty bit</strong> indican si la página ha sido modificada
          desde la última vez que se cargó
    li.fragment  Páginas <em>read-only</em> nunca modifican su <strong>dirty bit</strong>
  



/---------------------------------------------------------------------
/ Frame
  \frametitle{Reemplazo de páginas}

/  Algoritmos para decidir <em>qué página reemplazar</em>
  ul
    li.fragment  ¿Cuál es mejor?
    li.fragment  Uno que genere pocos <em>page faults</em>
  
  
  Comparables usando una misma secuencia de acceso a memoria
  ul
    li.fragment  Ej: Con esta secuencia de accesos a memoria
      ul
        li.fragment  0145, 0400, 0102, 0670, 0110, 0672, 0112, 0198, 0153, 0602, 0170
      
    li.fragment  Y con páginas que almacenen 100 direcciones, la secuencia de acceso es:
      ul
        li.fragment  1,4,1,6,1,6,1,6,1
      
  



/---------------------------------------------------------------------
/ Frame
  \frametitle{Reemplazo de páginas}

/  \begin{center}
    \includegraphics[width=6cm]{figs/02-9_11.pdf}
  \end{center}
  
  Tasa de <em>page faults</em> también depende de la cantidad de <em>frame</em> disponibles
  


/---------------------------------------------------------------------
/ Frame
  \frametitle{Reemplazo FIFO}

/  \begin{block}{<strong>FIFO</strong>}
    Reemplazar la página que fue cargada hace más tiempo
  \end{block}

/  \begin{center}
    \includegraphics[width=10cm]{figs/02-9_12.pdf}
  \end{center}

/  Se reemplaza la página más antigua en haber sido cargada
  ul
    li.fragment  +Fácil de implementar
    li.fragment  -Compartamiento impredecible
  


/---------------------------------------------------------------------
/ Frame
  \frametitle{Reemplazo FIFO}

/  Aumentar la cantidad de <em>frames</em> debe disminuir la cantidad de <em>page faults</em>
  
  ul
    li.fragment  Ejemplo. Secuencia 1,2,3,4,1,2,5,1,2,3,4,5
    li.fragment  Con 3 frames genera 9 <em>page faults</em>
    li.fragment  Con 4 frames genera 10 <em>page faults</em> (¿?)
  
  
  \begin{center}
    \includegraphics[width=5.5cm]{figs/02-9_13.pdf}
  \end{center}

/  Este problema se conoce como <strong>anomalía de Bélády</strong>\footnote{Planteada por el húngaro László Bélády, 1969} 



/---------------------------------------------------------------------
/ Frame
  \frametitle{Reemplazo Óptimo}

/  \begin{block}{<strong>OPT</strong> ó <strong>MIN</strong>}
    Reemplazar la página que no será usada por mayor tiempo
  \end{block}

/  No sufre la anomalía de Bélády.

/  \begin{center}
    \includegraphics[width=8cm]{figs/02-9_14.pdf}
  \end{center}

/  ul
    li.fragment  +Óptimo
    li.fragment  -Difícil de implementar, pues requiere conocimiento futuro (como SJF)
  


/---------------------------------------------------------------------
/ Frame
  \frametitle{Reemplazo LRU (<em>Least Recently Used</em>)}
  \framesubtitle{Si no puedes obtener el óptimo, aproxímalo}

/  \begin{block}{<strong>LRU</strong>}
    Reemplazar la página que no ha sido usada por más tiempo
  \end{block}
  
  \begin{center}
    \includegraphics[width=8cm]{figs/02-9_15.pdf}
  \end{center}

/  Parece un buen compromiso. ¿Cómo implementarlo?
  ul
    li.fragment  Contadores, actualizado con valor de <em>timer</em>
    li.fragment  <em>Stack</em>, el último acceso avanza al tope del <em>stack</em>
  

/  En cualquier caso se requiere ayuda de <em>hardware</em>

/---------------------------------------------------------------------
/ Frame
  \frametitle{Aproximación a LRU}

/  Si no hay soporte de <em>hardware</em>, se puede aproximar el comportamiento de LRU
  
  ul
    li.fragment  <strong>Reference bit</strong> se marca para indicar páginas referenciadas
    li.fragment  Permite determinar qué páginas se han usado y cuáles no (sin orden)
  

/  Una técnica para incorporar orden:
  ul
    li.fragment  8-bit reference (<em>reference byte</em>) funcionan como ``bit de historia''
    li.fragment  A intervalo $r$ ($\sim 100$ms) se hace <em>right shift</em>
          del <em>reference bit</em>
    li.fragment  Frame con mayor <em>reference byte</em> es el usado más recientemente    
  
  
  Valores pueden no ser únicos. Entre ellos se decide de manera FIFO.
  

/---------------------------------------------------------------------
/ Frame
  \frametitle{Aproximación a LRU: Algoritmo de segunda oportunidad}
  \framesubtitle{Otra oportunidad, otra oportunidad, &hellip;}

/  Inicialmente, algoritmo FIFO, ordenado por tiempo de carga
  ul
    li.fragment  Al ser elegida, se observa su <em>reference bit</em>
      ul
        li.fragment  Reference bit 0: se reemplaza
        li.fragment  Reference bit 1: 2da oportunidad. Se cambia a 0, se establece tiempo de carga al tiempo actual, 
              y se pasa a la siguiente página
      
  

/  \begin{center}
    \includegraphics[width=4cm]{figs/02-9_17.pdf}
  \end{center}
  
  ¿Qué pasa si todos los bit están marcados como 1?


/---------------------------------------------------------------------
/ Frame
  \frametitle{Aproximación a LRU: Segunda oportunidad mejorada}

/  2da oportunidad considerando el par (<em>reference bit</em>, <em>dirty bit</em>)
  
  ul
    li.fragment  (0,0), no usado recientemente ni modificada
      ul
        li.fragment  Buena víctima
      
    li.fragment  (0,1), no usada recientemente, pero modificada
      ul
        li.fragment  Casi buena víctima. Requiere escribirla.
      
    li.fragment  (1,0), recientemente usada, pero no modificada
      ul
        li.fragment  Probablemente será leída pronto
      
    li.fragment  (1,1), recienemente usada, y modificada
      ul
        li.fragment  Probablemente será leída pronto
      
  



/---------------------------------------------------------------------
/ Frame
  \frametitle{Otros algoritmos}
  
  Con contador de accesos (costoso de implementar)
  ul
    li.fragment  <strong>Least Frequently Used</strong>. Una página muy accedida debe tener alto contador.
       ul
         li.fragment  ¿Y si se usó solo al inicio?
         li.fragment  Se puede complementar haciendo <em>shift</em> del contador periæodicamente
       
    li.fragment  <strong>Most Frequently Used</strong>. La página que tiene pocos accesos probablemente fue cargada recientemente
          y aún no ha sido muy usada
  


/---------------------------------------------------------------------
/\subsection{Asignación de <em>Frames</em> y <em>Thrashing</em>}

/ Frame
  \frametitle{Asignación de <em>Frames</em>}

/  La pregunta: ¿cuántos <em>frames</em> asignar a cada proceso?
  
  <strong>Mínimo</strong>
  ul
    li.fragment  Puede ser definido por la arquitectura
    li.fragment  O bien, depender de la cantidad de direcciones referenciables en una instrucción
      ul
        li.fragment  <code>load r1, 0x0160</code>. Dos frames: para la instrucción y para la dirección.
        li.fragment  Más complejo cuando se permiten indirecciones
  
  <strong>Máximo</strong>
  ul
    li.fragment  ¿Cómo dividir $m$ <em>frames</em> entre $n$ procesos?
  



/---------------------------------------------------------------------
/ Frame
  \frametitle{Asignación de <em>Frames</em>}

/  $m$ <em>frames</em> y $n$ procesos
  ul
    li.fragment  <strong>Asignación equitativa</strong>: $\lfloor m/n \rfloor$ a cada uno. 
    li.fragment  <strong>Asignación proporcional</strong>: sea $s_i$ el tamaño de la memoria virtual del proceso $p_i$,
          cada proceso recibe $a_i$ <em>frames</em>: 
          \[ a_i = \frac{s_i}{\sum{s_i}} \times m \]
          Proporción también puede estar relacionada a la prioridad del proceso
          
  



/---------------------------------------------------------------------
/ Frame
  \frametitle{<em>Thrashing</em>}

/  Cada <em>page fault</em> genera tráfico entre disco y memoria de <em>al menos</em> una página.
  
  \vspace{1em}

/  \onslide<2->{Con alta tasa de <em>page fault</em> el sistema gasta más tiempo copiando <em>frames</em>
               entre disco y memoria}
  \vspace{1em}        

/  \onslide<3->{Se produce <strong>thrashing</strong>}


/---------------------------------------------------------------------
/ Frame
  \frametitle{<em>Thrashing</em>}

/  \begin{center}
    \includegraphics[width=6cm]{figs/02-9_18.pdf}
  \end{center}

/  ul
    li.fragment  Baja utilización de CPU
    li.fragment  <em>Scheduler</em> incrementa nivel de multiprogramación
    li.fragment  Procesos nuevos requieren <em>frames</em>.
    li.fragment  S.O. quita <em>frames</em> a procesos en ejecución
    li.fragment  Procesos en ejecución aumentan su tasa de <em>page fault</em>
    li.fragment  S.O. gasta más tiempo cargando <em>frames</em>
    li.fragment  Baja utilización de CPU
  



/---------------------------------------------------------------------
/ Frame
  \frametitle{Localidad de referencia}

/  Estrategia para evitar <em>thrashing</em>: aprovechar la <strong>localidad de referencia</strong>
  
  ul
    li.fragment  Teoría: procesos saltan de una localidad a otra
    li.fragment  Referencias se dan principalmente en una localidad de memoria y,
          con baja frecuencia, saltan a otro localidad
  
  
  \begin{center}
    \includegraphics[width=4cm]{figs/02-9_19.pdf}
  \end{center}




/---------------------------------------------------------------------
/ Frame
  \frametitle{Modelo de <em>Working Set</em>}

/  \begin{block}<strong>Working Set</strong>
    Conjunto de páginas usadas en los últimos $\Delta$ accesos
  \end{block}

/  \begin{center}
    \includegraphics[width=9cm]{figs/02-9_20.pdf}
  \end{center}

/  $\Delta$ determina el tamaño del <em>working set</em> del proceso $i$: $\text{WSS}_i$
  
  \vspace{1em}
  
  Demanda por páginas: $D=\sum{\text{WSS}_i}$
  
  \vspace{1em}
  
  Si hay $m$ frames, y $D > m$, entonces habrá <em>thrashing</em>



/---------------------------------------------------------------------
/ Frame
  \frametitle{Modelo de <em>Working Set</em>}
  \framesubtitle{¿Cómo implementarlo?}

/  Aprovechar los <em>reference bit</em>
  
  ul
    li.fragment  Observar <em>reference bit</em> a intervalos regulares, cada $R$ referencias
    li.fragment  <em>Reference bit</em> se copian y se borran
    li.fragment  En la siguiente observación se comparan los valores copiados
          y los nuevos <em>reference bit</em>.
    li.fragment  Páginas modificadas se mantienen dentro del <em>working set</em>
  
  Permite aproximar el <em>working set</em>, a menor costo que analizar todas las referencias


/---------------------------------------------------------------------

/ Frame
  \frametitle{Resumen}

/  ul
    li.fragment  Direccionamiento de memoria
      ul
        li.fragment  Transformaciones de dirección lógica a física
        li.fragment  Tipos de asignacioens: contigua, segmentada, paginada
      
    li.fragment  Memoria Virtual
      ul
        li.fragment  Permite direccionar más memoria que la memoria física disponible
        li.fragment  Páginas se asignan a <em>frames</em> en la medida que se necesiten
        li.fragment  Si no hay <em>frames</em> disponibles se debe reemplazar alguna página
        li.fragment  Reemplaza FIFO, OPT, LRU
        li.fragment  Cantidad de <em>frames</em> asignados a cada proceso debe ser el apropiado,
              de lo contrario se puede producir <em>thrashing</em>
