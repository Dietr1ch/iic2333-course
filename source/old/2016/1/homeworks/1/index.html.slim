---
title: Tarea 1
layout: activity
---

article
	section.top
		p En esta tarea van a preparar el stack de llamadas para los programas.
		p La tarea se divide en 2 partes independientes,
		ul
			li  Preparar un stack en un programa pequeño.
			li  Preparar el stack de Pintos, un SO educacional.

	section
		h2 El stack de llamadas
		/  --------------------
		p Es usual ver el stack de llamadas en la terminación abrupta de algún programa, así que es seguro decir que ya han visto muchos de ellos.

		p Consideremos el siguiente programa,
		pre
			code.hljs
				| int factorial(int n) {
				    if(n<=0)
				      return 1;
				    return n * factorial(n-1);
				  }
				  
				  int main() {
				    return factorial(5);
				  }

		h4 ¿Cómo se ejecuta?
		p Primero veamos una versión no-comprimida de lo que hay que calcular.
		pre
			code.hljs
				| /* -- */  int factorial(int n) {
				  /* 02 */    if(n<=0)
				  /* 03 */      return 1;  /* <-- */
				  /* 04 */    int r = factorial(n-1);
				  /* 05 */    return n*r;
				  /* -- */  }
				  /* -- */  
				  /* -- */  int main() {
				  /* 09 */    int r = factorial(4);
				  /* 10 */    return r;
				  /* -- */  }

		p Supongamos que queremos llegar hasta la línea 3.

		p Como todo programa, se comienza a calcular <code>main()</code>
		ul
			li
				pre
					code.hljs.c
						| main() /* ... */
				p Pero mientras calculamos <code>main()</code> hay que calcular otra función,
				pre
			ul
				li
					pre
						code.hljs.c
							| factorial(n=4) /* ... */
					p y otra&hellip;
				ul
					li
						pre
							code.hljs.c
								| factorial(n=3) /* ... */
					ul
						li
							pre
								code.hljs.c
									| factorial(n=2) /* ... */
						ul
							li
								pre
									code.hljs.c
										| factorial(n=1) /* ... */
							ul
								li
									pre
										code.hljs.c
											| factorial(n=0) /* ... */
											  /* 03 */    return 1;

		p Mientras se computa una función hay que ser capaces de pausar el cálculo mientras se computa otra.
		p Y hay que reanudar el cálculo una vez que se conozca el valor de la función.

		h4 ¿Cómo hacemos todos los cálculos en memoria?
		p Primero hay que notar que todas las llamadas asignan a <code>r</code>, pero esa variable es local para cada cálculo. Hay más variables de las que parece tener el programa.
		ul
			li
				pre
					code.hljs.c
						| main() /* ... */
						  /* 09 */    int r = factorial(4);
			ul
				li
					pre
						code.hljs.c
							| factorial(n=4) /* ... */
							  /* 04 */    int r = factorial(n-1);
				ul
					li
						pre
							code.hljs.c
								| factorial(n=3) /* ... */
								  /* 04 */    int r = factorial(n-1);
					ul
						li
							pre
								code.hljs.c
									| factorial(n=2) /* ... */
									  /* 04 */    int r = factorial(n-1);
						ul
							li
								pre
									code.hljs.c
										| factorial(n=1) /* ... */
										  /* 04 */    int r = factorial(n-1);
							ul
								li
									pre
										code.hljs.c
											| factorial(n=0) /* ... */
											  /* 03 */    return 1;

		p Agruparemos la información de cada función en un <code>frame</code>.
		p Un frame necesita tener:
		ul
			li Un puntero a la instrucción que se está ejecutando (lo necesitaremos para reanudar el cálculo)
			ul
				li Con ese puntero queda implícita la función que se estaba calculando, es la dueña de esa instrucción.
			li Los argumentos que le entregaron a la función.
			li Las variables locales de la función.

		p Para almacenar la ejecución completa podríamos tener un arreglo de frames y un índice al frame actual.
		ul
			li Pero no todas las funciones usan la misma cantidad de argumentos y variables locales.
			li Además no nos interesa poder acceder a cualquier función, sólo necesitamos un orden LIFO.
			li Un stack de <code>frames</code> de tamaño variable.

		p Durante la ejecución de un programa, el compilador transforma las llamadas a funciones y retornos a operaciones del stack de funciones.
		p Pero eso es una vez que ya está corriendo el programa.
		p ¿Quién hace el caso base? El SO cuando carga el programa...


	section
		br
	section#hw1
		h2 Tarea 1
		/  -------
		section#hw1-formalidades
			h4 Formalidades
			/  ------------
			p La tarea será entregada vía <code>git</code>
			ul
				li  La entrega es el Lunes 28 de Marzo a las 23:59.
				li  Puede ser realizada en grupos de 2.
				li  Su repositorio DEBE ser privado, de lo contrario calificará como copia (alguien les podría haber copiado).
				li  La entrega será automatizada, basta que <a href="http://goo.gl/forms/Oph3ORVNLv" target="_blank">registren</a> su grupo y repositorio
				ul
					li  Como el repositorio debe ser privado, tendrán que <a href="https://confluence.atlassian.com/bitbucket/use-deployment-keys-294486051.html">permitir</a> acceso especial al curso, autorizando al servidor de tareas acceder al contenido.
					ul
						li  Para esto basta <a href="https://confluence.atlassian.com/bitbucket/use-deployment-keys-294486051.html" target="_blank">registrar</a> la <a href="/os-id_rsa.pub">llave pública del curso</a> en las <em>Deployment Keys</em> de su repositorio.


		section
			h4 Repositorio
			/  -----
			p El código de la tarea se encuentra en <a href="https://bitbucket.org/Dietr1ch/pintos/commits/branch/os16-1" target="_blank">el repositorio del curso</a> y para trabajar en el deben <a href="https://bitbucket.org/Dietr1ch/pintos/fork" target="_blank">hacer un fork</a> PRIVADO!
			ul
				li  Lo más cómodo es que usen bitbucket, pero pueden usar github u otro host mientras sea privado.
			p El "repo" del curso es un fork del proyecto <a href="http://web.stanford.edu/class/cs140/projects/pintos/pintos_1.html#SEC1" target="_blank">pintos</a> de Stanford

			h4 TODO:
			/  -----
			p Como ya se dijo, la tarea se divide en 2 partes independientes,
			ul
				li  <em>Warmup (30%)</em>: Preparar un stack en un programa pequeño.
				ul
					li
						code = "/extra/argParse.c"
				li  <em>Tarea (70%)</em>: Preparar el stack de Pintos
				ul
					li
						code = "/src/userprog/process.c"


			section
				h5 Parte 1
				/  -------
				p Para ejecutarlo deben compilarlo
				pre
					code.hljs.bash
						| cd path/to/pintos/
						  cd extra
						  $CC -g -o argParse argParse.c  # CC = "gcc" || "clang"
						  
						  # Common problems:
						  #  * $CC May be not set on some environments, set it or just pick a compiler
						  #  * Old compilers don't use C11 by default (use -std=C11 to force it)
				p Y luego lo pueden ejecutar,
				pre
					code.hljs.bash
						| ./argParse

				p Sólo cambiando <code>int parse()</code> debería ejecutar sin errores.


			section
				h5 Parte 2
				/  -------
				p  Para trabajar con el resto de pintos deben compilar distintos módulos del kernel y preparar un "disco duro" con programas para ejecutar 
				p  Los módulos se encuentran en <code>/src/</code> 
				ul
					li  <code>threads</code>
					li  <code>userprog</code>
					li  <code>vm</code>
					li  <code>examples</code>
					li  <code>filesys</code>
				p  Para compilar los módulos, basta ejecutar <code>make</code> en cada uno de los directorios.
				p  La preparación del disco necesita ejecutar la máquina virtual varias veces,
				ul
					li  Hay que crear un archivo que sirva de "disco duro" para pintos.
					li  Hay que formatear el disco, ya que el disco se usa con una estructura particular en vez de como un arreglo gigante de bytes.
					li  Hay que copiar programas al disco duro (ya que comienza vacío)
					ul
						li  Para la tarea cualquier programa que use argumentos es útil
						ul
							li  cowsay
							li  interecho
							li  &hellip;
				br
				p  Una vez hecho esto, desde <code>/src/userprog</code> se puede ejecutar pintos y pedirle que luego de comenzar ejecute algún programa de los que se copiaron
				pre
					code.hljs.bash
						| cd path/to/pintos
						  cd src/userprog
						  ../utils/pintos -- run "programName programArgs.."
				h6 Branch del curso
				p  Obviamente la preparación de esto hace que sea tedioso probar el programa, es por esto que en el repo del curso hay un <a href="https://bitbucket.org/Dietr1ch/pintos/commits/branch/os16-1" target="_blank"><em>branch</em></a> que aliviana la tarea, <code>os16-1</code>. Se sugiere fuertemente que hagan <em>merge</em> de ese <em>branch</em> al <em>branch</em> principal de su 'repo'.
				p  En el branch se mejora el <code>Makefile</code> de <code>/</code> ("root", el directorio base del proyecto) para simplificar el proceso,
				ul
					li  Crea <code>TAGS</code> para <a href="https://en.wikipedia.org/wiki/Ctags#Editors_that_support_ctags" target="_blank">navegar el código</a> (si tienen <code>ctags</code> instalado).
					li  Compila todos los módulos.
				p  También se agrega un script de <code>bash</code> para preparar el disco, <code>build-disk</code>, este no se ejecuta desde <code>make</code> ya que puede no ser necesario recrear el disco
				p  Pronto se agregará un commit con soporte parcial de la syscall <code>write</code>, lo que permitirá que los programas del disco duro puedan imprimir por <code>stdout</code>.
				pre
					code.hljs.bash
						| cd path/to/pintos
						  make         # Builds all modules
						  ./build-disk # Prepares a disks with a few programs

				section
					h6 ¿Dónde comenzar?
					p El <em>hack</em> de <a href="http://web.stanford.edu/class/cs140/projects/pintos/pintos_3.html#SEC40" target="_blank">sugerido por la documentación</a> ya fue aplicado en el branch del curso, pero se espera lo eliminen cuando implementen esta tarea.
					ul
						li
							a href="http://web.stanford.edu/class/cs140/projects/pintos/pintos.html" target="_blank" Documentación de Pintos
							p = "(Recuerden que la documentación de Pintos cubre más cosas y habla sobre tareas mucho más extensas que esta)"
						ul
							li
								a href="http://web.stanford.edu/class/cs140/projects/pintos/pintos_3.html#SEC44" target="_blank" Argument Passing
							ul
								li
									a href="http://web.stanford.edu/class/cs140/projects/pintos/pintos_3.html#SEC51" target="_blank" Program Startup
							li
								a href="http://web.stanford.edu/class/cs140/projects/pintos/pintos_10.html#SEC145" target="_blank" Debugging Tools
								p Se recomienda intentar en este orden: print, backtraces y <code>gdb</code>. Pero una vez que ya sepan usar <code>gdb</code> (con breakpoints y evaluar expresiones basta) no van a querer depender de prints y backtraces.


				section
					h6 ¿Qué debería modificar?
					p <code>/src/userprog/process.c</code>
					ul
						li <code>setup_stack(...)</code>

				section
					h6 Resumen
					pre
						code.hljs.bash
							| git clone urlMyPrivateFork
							  cd project
							  # Add remote and merge changes
							  
							  $EDITOR .    # Work
							  make         # Builds all modules
							  ./build-disk # Prepares a disks with a few programs
							  
							  cd src/userprog/
							  ../utils/pintos -- run program  # Test changes
							  
							  git commit
							  git push

