---
title: Procesos
layout: activity
---
section.top
	p Los procesos son ejecuciones de los programas. Es usual ver un programa con muchos procesos, por ejemplo 'Chrome' usa varios (demasiados D:) procesos que entre todos se coordinan para hacer funcionar el navegador.
	p Con esto debería ser claro que un proceso es algo más que un programa (¿estrictamente más?).
	p Un proceso debe tener la memoria que usa el programa, saber que parte del programa se esta ejecutando, que archivos tiene abiertos y con que otros procesos se está comunicando <small>(es claro que los 100 procesos de Chrome se logran coordinar para que el navegador funcione)</small>

article
	section#syscalls
		h2 Syscalls

		section#sys-fork
			h3 Fork
			p Fork es una <em>syscall</em> que permite crear procesos nuevos.
			p Como un programa "en blanco" debería terminar, el comportamiento más obvio que queda es que sea una copia casi exacta del programa actual <small>(si es exacta no vale la pena gastar recursos en ejecutarlo, ya que calcula y hace lo mismo)</small>.
			p Si consultamos el manual de fork (<code>man 2 fork</code>)
			pre#man-fork
				code.hljs
					| FORK(2)                   Linux Programmer's Manual                   FORK(2)
					  
					 NAME
					       fork - create a child process
					 
					 SYNOPSIS
					       #include <unistd.h>
					 
					       pid_t fork(void);
					 
					 DESCRIPTION
					       fork()  creates a new process by duplicating the calling process.  The
					       new process is referred to as the child process.  The calling  process
					       is referred to as the parent process.
					 
					       The  child  process and the parent process run in separate memory spa‐
					       ces.  At the time of fork() both memory spaces have the same  content.
					       Memory  writes,  file  mappings  (mmap(2)), and unmappings (munmap(2))
					       performed by one of the processes do not affect the other.
					 
					       The child process is an exact duplicate of the parent  process  except
					       for the following points:
					 
					       *  The  child  has  its  own  unique process ID, and this PID does not
					          match the ID of any existing process group (setpgid(2)).
					 
					       *  The child's parent process ID is the same as the  parent's  process
					       ...
					 
					 RETURN VALUE
					       On  success,  the  PID of the child process is returned in the parent,
					       and 0 is returned in the child.  On failure, -1  is  returned  in  the
					       parent, no child process is created, and errno is set appropriately.
	
	
			section#sys-fork-sample
				p Al leer el manual usualmente queremos saber,
				ul
					li Dónde se declara la función (qué hay que #incluir)?.
					li Qué variantes existen y cuáles son los argumentos?.
					li Qué retorna la función?
					li Qué hace?
	
	
				p Con eso podemos construir un programa de ejemplo,
				pre
					code.hljs
						| int main(void) {
						  
						    switch( fork() ) {
						      case -1:  /* Error */
						        perror("fork failed");
						        exit(1);
						    
						    
						      case 0:   /* Child */
						        printf("[%6d:%6d] I'm the  child process\n",  getppid(), getpid()  );
						        break;
						    
						      default:  /* Parent */
						        printf("[%6d:%6d] I'm the parent process\n",  getppid(), getpid()  );
						    }
						    
						    return 0 ;
						  }
		section#sys-wait
			h3 Wait
			p <code>wait(pid_t)</code> es una <em>syscall</em> que espera a un hijo en particular.
			p Se puede esperar al primero en terminar entregando <code>NULL</code>.
			p Muchas veces es necesario estar seguro que los hijos terminaron su trabajo antes de crear nuevos <small>(para no tener demasiados procesos)</small> o de terminar el trabajo.
	
		section#sys-exec
			h3 Exec
			p <code>exec</code> es una familia de <em>syscall</em> que permiten cambiar el programa que ejecuta el proceso.
			p Las distintas variantes se deben a las distintas maneras en las que se puede elegir el programa y sus argumentos.
	
		section#sys-exit
			h3 Exit
			p <code>exit(int)</code> es una <em>syscall</em> que inicia el término de un programa, liberando sus recursos y entregando el <em>código de error</em> al proceso padre.
	
	section#challenge
		h3 Desafío
		section#challenge-intro
			p Un posible uso de múltiples procesos es para resolver problemas del estilo <em>dividir y conquistar</em>
			p Mergesort es un ejemplo de esa clase de problemas, como este curso no es de algoritmos y como falta ver algunos detalles resolverán una versión más simple.
			pre
				code.hljs
					| int *arr, length;  /* (Shared) Array to sort and it's length */
					  int K              /* Chunks to use (processor count)        */
					  
					   sort(int *arr, int l, int s, int e);  /* Sorts the array slice [s,e)      */
					  merge(int *arr, int l, int K);         /* New array from K (sorted) chunks */
					  print(int *arr, int l);                /* Prints an array to stdout        */
					  
					  int main(int argc, char const* argv[]) {
					    /* TODO: sort on K independent chunks on DIFFERENT processes. */
					    
					    for(int i=0; i!=K; i++)  /* Wait for K children */
					      wait(NULL);
					    
					    print(  merge(arr, length, K), length  );
					    return 0;
					  }

		section#challenge-problem
			h5 El problema
			p Finalmente, lo que interesa es que puedan crear y usar procesos sincronizando (sólo donde sea necesario), por lo que antes de ver cómo compartir información, vamos a ejercitar el manejo de procesos con fork.

			p Haga un programa que cree el siguiente árbol de procesos,
			pre
				code.hljs
					|                         p0
					                        /    \
					                       /      \
					                     p1        p2
					                    /  \      /  \
					                  p11  p12  p21  p22

			p En que:
			ul
				li La raíz debe esperar a todos los decendientes y ejecutar <code>date -u --rfc-3339=seconds</code>
				li Las hojas deben usar <code>sleep(1)</code>, e imprimir <code>[PPID:PID]: terminating\n</code>
				li Los otros nodos deben usar <code>sleep(1)</code>, e imprimir <code>[PPID:PID]: created process CPID\n</code> para cada hijo
			small Hay una solución de 30 loc

